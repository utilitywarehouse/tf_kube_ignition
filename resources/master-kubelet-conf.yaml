# https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
authentication:
  anonymous:
    enabled: false
  webhook:
    enabled: true
  x509:
    clientCAFile: "/etc/kubernetes/ssl/ca.pem"
authorization:
  mode: AlwaysAllow
# https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/configure-cgroup-driver/#configuring-the-kubelet-cgroup-driver
cgroupDriver: systemd
clusterDNS:${cluster_dns}
clusterDomain: "cluster.local"
${feature_gates == "" ? "" : "featureGates:\n  ${feature_gates}"}
containerRuntimeEndpoint: "unix:///run/containerd/containerd.sock"
registerWithTaints:
  - key: "node-role.kubernetes.io/master"
    effect: "NoSchedule"
  - key: "node-role.kubernetes.io/control-plane"
    effect: "NoSchedule"
serializeImagePulls: false
staticPodPath: "/etc/kubernetes/manifests"
tlsCertFile: "/etc/kubernetes/ssl/kubelet.pem"
tlsPrivateKeyFile: "/etc/kubernetes/ssl/kubelet-key.pem"
# Point kubelet to the "real" resolv.conf to avoid loopback addresses that will
# be detected as a loop via CoreDNS https://coredns.io/plugins/loop/#troubleshooting
# Flatcar discussion around the issue: https://github.com/flatcar-linux/Flatcar/issues/285
resolvConf: "/run/systemd/resolve/resolv.conf"
